$ErrorActionPreference = "Stop"

$errorHandling = "$((Get-Item $PSScriptRoot).Parent.FullName)\Write-ErrorLog.ps1"

. $errorHandling


function Inspect-InternalUsersSendingMalwarePolicy {
Try {

	$enabled_malware_filters = Get-MalwareFilterPolicy | Where-Object {$_.EnableInternalSenderAdminNotifications -eq $true}

	$non_alerting_filters = Get-MalwareFilterPolicy | Where-Object {$_.EnableInternalSenderAdminNotifications -eq $false}

	$flag = $false

	$findings = @()

	foreach ($filter in $enabled_malware_filters){
		#$result = Get-MalwareFilterRule
		foreach ($filter in $enabled_malware_filters){
			If (($filter.IsDefault -eq $false) -and ((Get-MalwareFilterRule -Identity $filter.name).State -eq "Enabled")){
				$flag = $true
			}
			Else {
				$findings += Write-Output "Malware filter named $($filter.Name); Admin Address: `$null, NotificationsEnabled: $($filter.EnableInternalSenderAdminNotifications)"
			}
		}
	}

	If ($flag -eq $false){
		ForEach ($filter in $non_alerting_filters) {
			If ((-NOT $filter.InternalSenderAdminAddress) -and (-NOT $filter.EnableInternalSenderAdminNotifications)) {
				$findings += Write-Output "Malware filter named $($filter.Name); Admin Address: `$null, NotificationsEnabled: $($filter.EnableInternalSenderAdminNotifications)"
			}
		}
		
		If ($findings.Count -NE 0) {
			return $findings
		}
	}
	
	return $null

}
Catch {
Write-Warning "Error message: $_"
$message = $_.ToString()
$exception = $_.Exception
$strace = $_.ScriptStackTrace
$failingline = $_.InvocationInfo.Line
$positionmsg = $_.InvocationInfo.PositionMessage
$pscommandpath = $_.InvocationInfo.PSCommandPath
$failinglinenumber = $_.InvocationInfo.ScriptLineNumber
$scriptname = $_.InvocationInfo.ScriptName
Write-Verbose "Write to log"
Write-ErrorLog -message $message -exception $exception -scriptname $scriptname
Write-Verbose "Errors written to log"
}

}

return Inspect-InternalUsersSendingMalwarePolicy


